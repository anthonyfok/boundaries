# Relevant docs:
# https://docs.github.com/en/actions/guides/creating-postgresql-service-containers

name: GPKG to PostgreSQL dump
on:
  push:
  pull_request:

  workflow_dispatch:

jobs:
  gpkg-to-pgdump:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

    services:
      postgis:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # See https://github.com/actions/checkout/issues/165
      - name: Cache Git LFS
        uses: actions/cache@v2
        # id: cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('**/*.gpkg') }} # Adapt to target the type of the files committed with git lfs

      - name: pre-Housekeeping
        run: |
          ls -l
          df -h /
          whoami
          cat /etc/os-release
          docker ps
          dpkg -l | grep postgres
          psql --version
          7z

      - name: Git LFS pull
        run: git lfs pull

      - name: Install gdal-bin from ubuntugis-unstable
        run: |
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt update -q
          sudo apt install --no-install-recommends -q -y gdal-bin
          ogr2ogr --version

      - name: Run ogr2ogr
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: password
          DB_NAME: opendrr
        run: |
          #set -x
          # Set up database
          psql -c "CREATE DATABASE ${DB_NAME} OWNER ${PGUSER};"
          psql -d "$DB_NAME" -c 'CREATE SCHEMA boundaries;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis_topology;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION fuzzystrmatch;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis_tiger_geocoder;'
          # Import GeoPackage files into PostgreSQL
          for i in *.gpkg; do
            time ogr2ogr -t_srs "EPSG:4326" -f PostgreSQL PG:"host='$PGHOST' user=postgres dbname='$DB_NAME' password='$PGPASSWORD'" "$i" -lco LAUNDER=NO -nln boundaries.$(basename "$i" .gpkg)
          done
          # Extract the PostgreSQL database
          pg_dump --clean --if-exists -Fc -f opendrr-boundaries.dump "$DB_NAME"
          pg_dump --clean --if-exists -Fd -f opendrr-boundaries.dumpdir "$DB_NAME"
             
      - name: post-Housekeeping
        run: |
          set -x
          ls -l
          ls -l opendrr-boundaries.dump
          ls -l opendrr-boundaries.dumpdir/
          du -csh *
          du -csh .git/lfs
          df -h /

# TODO
# add timestamp? checksum?
# Run weekly or every 6 days to keep the Git LFS cache "fresh"
