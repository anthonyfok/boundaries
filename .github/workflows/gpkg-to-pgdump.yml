name: Convert GeoPackage files to PostGIS archive

# This GitHub Actions workflow takes the OpenDRR Boundary geometries
# for model results in GeoPackage files (*.gpkg) generated by @wkhchow,
# imports them into a new PostGIS database using ogr2ogr, and
# exports the results into a custom-format PostGIS database archive
# named opendrr-boundaries.dump, which is supposedly equivalent to
# opendrr-boundaries.sql generated by @wkhchow.
#
# The PostGIS database archive (dump) files are uploaded to GitHub
# as artifacts on GitHub, and to Amazon S3 and Backblaze B2 buckets.
# Upon tagged releases, the *.gpkg and database archive files are also
# uploaded as release assets on GitHub,

# Reference: https://docs.github.com/en/actions/guides/creating-postgresql-service-containers
# Pre-installed tools in "ubuntu-20.04" include: 7z, docker, time, psql

on:
  #push:
  #  branches:
  #    - master
  #  tags:
  #    - 'v*'
  #pull_request:
  #  branches:
  #    - master
  #schedule:
  #  - cron: '38 2 */3 * *'
  workflow_dispatch:

jobs:
  gpkg-to-pgdump:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    env:
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: password
      DB_NAME: opendrr

    services:
      postgis:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # See https://github.com/actions/checkout/issues/165
      - name: Cache Git LFS
        uses: actions/cache@v2
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('**/*.gpkg') }} # Adapt to target the type of the files committed with git lfs
          restore-keys: |
            ${{ runner.os }}-lfs-${{ hashFiles('**/*.gpkg') }}
            ${{ runner.os }}-lfs-

      - name: Pre-run information
        if: ${{ github.event_name != 'schedule' }}
        run: |
          set -x
          ls -l
          df -h
          whoami
          cat /etc/os-release
          docker ps

      - name: Git LFS pull
        run: stdbuf -oL git lfs pull

      - name: Install gdal-bin from ubuntugis-unstable
        if: ${{ github.event_name != 'schedule' }}
        run: |
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt update -q
          sudo apt install --no-install-recommends -q -y gdal-bin backblaze-b2

      - name: Run psql to set up opendrr database
        if: ${{ github.event_name != 'schedule' }}
        run: |
          psql --version
          psql -c "CREATE DATABASE ${DB_NAME} OWNER ${PGUSER};"
          psql -d "$DB_NAME" -c 'CREATE SCHEMA boundaries;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis_topology;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION fuzzystrmatch;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis_tiger_geocoder;'

      - name: Run ogr2ogr to import GeoPackage files into PostGIS
        if: ${{ github.event_name != 'schedule' }}
        run: |
          set -x
          ogr2ogr --version
          for i in *.gpkg hexbin_4326/*.gpkg; do
            stdbuf -oL echo "ogr2ogr: $i"
            /usr/bin/time stdbuf -oL ogr2ogr -t_srs "EPSG:4326" \
              -f PostgreSQL \
              PG:"host='$PGHOST' user=postgres dbname='$DB_NAME' password='$PGPASSWORD'" \
              "$i" -lco LAUNDER=NO -nln boundaries.$(basename "$i" .gpkg)
          done

      - name: Run pg_dump to extract the opendrr PostGIS database into a custom-format archive file
        if: ${{ github.event_name != 'schedule' }}
        run: |
          stdbuf -oL pg_dump --version
          stdbuf -oL pg_dump --clean --if-exists -Fc -Z 9 -f opendrr-boundaries.dump "$DB_NAME"

      - name: Calculate checksums of opendrr-boundaries.dump and opendrr-boundaries.sql
        if: ${{ github.event_name != 'schedule' }}
        run: |
          for ext in dump sql; do
            for i in md5 sha1 sha256 sha512; do
              echo "${i}sum opendrr-boundaries.${ext} > opendrr-boundaries.${ext}.${i}sum"
              ${i}sum opendrr-boundaries.${ext} > opendrr-boundaries.${ext}.${i}sum
            done
          done

      - name: "1.1. Upload opendrr-boundaries.dump (generated by this job) artifact on GitHub"
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name != 'schedule' }}
        with:
          name: opendrr-boundaries-dump
          path: |
            opendrr-boundaries.dump
            opendrr-boundaries.dump.*sum

      - name: "1.2. Upload opendrr-boundaries.sql (generated by @wkhchow) artifact on GitHub"
        uses: actions/upload-artifact@v3
        if: ${{ github.event_name != 'schedule' }}
        with:
          name: opendrr-boundaries-sql
          path: |
            opendrr-boundaries.sql
            opendrr-boundaries.sql.*sum

      - name: "2.1. Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ github.event_name != 'schedule' }}
        with:
          aws-access-key-id: ${{ secrets.S3_WRITER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_WRITER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: "2.2. Upload opendrr-boundaries.dump etc. to Amazon S3 bucket"
        if: ${{ github.event_name != 'schedule' }}
        run: |
          aws s3 sync . s3://opendrr-api-prebuilt-cache-1/boundaries/ \
            --exclude "*" \
            --include "opendrr-boundaries.dump" \
            --include "opendrr-boundaries.dump.*sum" \
            --include "opendrr-boundaries.sql" \
            --include "opendrr-boundaries.sql.*sum" \
            --acl bucket-owner-full-control

      - name: "3. Upload to Backblaze B2 bucket"
        if: ${{ github.event_name != 'schedule' }}
        env:
          OPENDRR_B2_KEY_ID: ${{ secrets.OPENDRR_B2_KEY_ID }}
          OPENDRR_B2_APPLICATION_KEY: ${{ secrets.OPENDRR_B2_APPLICATION_KEY }}
        run: |
          set -x
          backblaze-b2 version
          backblaze-b2 authorize-account "$OPENDRR_B2_KEY_ID" "$OPENDRR_B2_APPLICATION_KEY"
          stdbuf -oL backblaze-b2 upload-file \
            --sha1 $(sha1sum opendrr-boundaries.dump | cut -d ' ' -f1) \
            --contentType application/vnd.postgresql.dump \
            OpenDRR \
            opendrr-boundaries.dump opendrr-boundaries.dump
          for i in md5 sha1 sha256 sha512; do
            backblaze-b2 upload-file \
              --sha1 $(sha1sum opendrr-boundaries.dump | cut -d ' ' -f1) \
              --contentType text/plain \
              OpenDRR \
              opendrr-boundaries.dump.${i}sum opendrr-boundaries.dump.${i}sum
          done
          backblaze-b2 clear-account

      - name: "4. Upload as release assets on GitHub (only for a tagged release)"
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            opendrr-boundaries.dump
            opendrr-boundaries.dump.*sum
            opendrr-boundaries.sql
            opendrr-boundaries.sql.*sum
            *.gpkg
            hexbin_4326/*.gpkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post-run information
        if: ${{ github.event_name != 'schedule' }}
        run: |
          set -x
          ls -l
          du -csh *
          du -csh .git/lfs
          df -h /
